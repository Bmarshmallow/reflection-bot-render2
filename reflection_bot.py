
import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

ASK_REFLECTION = 1
user_answers = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –í—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ üåô\n"
        "–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç.\n\n"
        "1. –ß—Ç–æ –±—ã–ª–æ —Ç–≤–æ–µ–π –º–∏–∫—Ä–æ–ø–æ–±–µ–¥–æ–π —Å–µ–≥–æ–¥–Ω—è?"
    )
    user_answers[user.id] = []
    return ASK_REFLECTION

async def collect_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    text = update.message.text
    user_answers[user.id].append(text)
    questions = [
        "2. –ì–¥–µ —Ç—ã –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–°–∏—Å—Ç–µ–º–∞ 1)?",
        "3. –ì–¥–µ –≤–∫–ª—é—á–∞–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –°–∏—Å—Ç–µ–º—É 2?",
        "4. –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º –≤–ª–æ–∂–µ–Ω–∏–µ–º (–∞–∫—Ç–∏–≤–æ–º)?",
        "5. –ß—Ç–æ —Å—Ç–æ–∏—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?"
    ]
    if len(user_answers[user.id]) < len(questions) + 1:
        await update.message.reply_text(questions[len(user_answers[user.id]) - 1])
        return ASK_REFLECTION
    else:
        summary = "\n".join([f"{i+1}. {ans}" for i, ans in enumerate(user_answers[user.id])])
        await update.message.reply_text(f"–¢–≤–æ—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n{summary}")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_REFLECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
